AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an S3 bucket to host website, CloudFront to serve the site itself, 
  two lambdas to export from tilda and to invoke export function, OAI for CloudFront and API with custom resource and 'POST' method
Resources: 
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: origin-access-xxxxxx
  # Certificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: 
  #     ValidationMethod: DNS
  S3HostBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: xxxxxx-website
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      WebsiteConfiguration:
        IndexDocument: '123'
        ErrorDocument: oops
  S3HostBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: 
        Ref: S3HostBucket
      PolicyDocument:
        Statement:
          -
            Effect: 'Allow'
            Principal: 
              AWS: 
                Fn::Join:
                  - ' '
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - Ref: CloudFrontOAI
            Action: 's3:GetObject'
            Resource:
                Fn::Join:
                  - ''
                  - - Fn::GetAtt:
                      - 'S3HostBucket'
                      - 'Arn'
                    - '/*'
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - xxxxxxx.io
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: 'false'
          TargetOriginId: 
            Fn::Join:
              - ''
              - - 'S3-'
                - Ref: S3HostBucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: '123'
        Enabled: 'true'
        HttpVersion: http2
        IPV6Enabled: 'true'
        # Logging:
        #   IncludeCookies: 'false'
        #   Bucket: xxxxxx-website
        #   Prefix: logs
        Origins:
          - DomainName:
              Fn::GetAtt:
                - 'S3HostBucket'
                - 'DomainName'
            Id: 
              Fn::Join:
                - ''
                - - 'S3-'
                  - Ref: S3HostBucket
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ''
                  - - 'origin-access-identity/cloudfront/'
                    - Ref: CloudFrontOAI
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:397695806330:certificate/8a684063-800b-4e19-88d9-82df059765aa
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: 'LogPerm' 
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup' 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogsEvent'
                Resource: '*'
          PolicyName: 'S3Access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - '*'
                Resource:
                  - Fn::GetAtt:
                      - 'S3HostBucket'
                      - 'Arn'
                  - 'arn:aws:s3:::test-migrat'
          PolicyName: 'XrayPerm'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'xray:PutTraceSegments'
                Resource: '*'
      RoleName: ExportLambdaRole
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: test-migrat
        S3Key: migrat.zip
      FunctionName: migrat
      Handler: migrat.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - 'LambdaRole'
          - 'Arn'
      Runtime: python2.7
      Timeout: 900 
      TracingConfig:
        Mode: Active
  InvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: 'LogPerm'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup' 
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogsEvent'
                Resource: '*'
          PolicyName: 'InvokePerm'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
          PolicyName: 'XrayPerm'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'xray:PutTraceSegments'
                Resource: '*'
      RoleName: InvokeLambdaRole
  LambdaInvokeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:  !Sub |
            import boto3
            def handler(event, context):
              call = boto3.client('lambda', region_name = 'eu-west-1')
              resp = call.invoke(FunctionName = 'migrat', InvocationType = 'Event')
              return {"statusCode": 200, "body": "Success"}
      FunctionName: invokelambda
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - 'InvokeLambdaRole'
          - 'Arn'
      Runtime: python2.7
      Timeout: 5
      TracingConfig:
        Mode: Active
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types: 
          - EDGE
      FailOnWarnings: 'false'
      Name: 'tilda'
  APIPUSHResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - 'API'
          - 'RootResourceId'
      PathPart: 'push'
      RestApiId: 
        Ref: API
  APIPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: None
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        # Credentials: 
        #   Fn::GetAtt:
        #     - LambdaInvokeFunction
        #     - Arn
        Uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:xxxxxxx:lambda:path/2015-03-31/xxxxxxx/'
              - Fn::GetAtt:
                - LambdaInvokeFunction
                - Arn
              - '/invocations'
        IntegrationHttpMethod: POST
      ResourceId:
        Ref: APIPUSHResource
      RestApiId: 
        Ref: API
